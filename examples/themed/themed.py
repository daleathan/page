#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.2
# In conjunction with Tcl version 8.6
#    Feb. 12, 2014 08:55:38 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import themed_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('New_Toplevel_1')
    root.geometry('600x881+650+150')
    themed_support.set_Tk_var()
    w = New_Toplevel_1 (root)
    themed_support.init(root, w)
    root.mainloop()

w = None
def create_New_Toplevel_1 (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('New_Toplevel_1')
    w.geometry('600x881+650+150')
    themed_support.set_Tk_var()
    w_win = New_Toplevel_1 (w)
    themed_support.init(w, w_win, param)
    return w_win

def destroy_New_Toplevel_1 ():
    global w
    w.destroy()
    w = None


class New_Toplevel_1:
    def __init__(self, master=None):
        _bgcolor = 'wheat'  # X11 color: #f5deb3
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#b2c9f4' # Closest X11 color: 'SlateGray2'
        _ana1color = '#eaf4b2' # Closest X11 color: '{pale goldenrod}' 
        _ana2color = '#f4bcb2' # Closest X11 color: 'RosyBrown2' 
        font10 = "-family {DejaVu Sans} -size 14 -weight normal -slant " + \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {Droid Sans Mono} -size 14 -weight normal  " + \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font10)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background=_bgcolor)
        master.configure(highlightbackground="wheat")
        master.configure(highlightcolor="black")


        self.TButton1 = ttk.Button (master)
        self.TButton1.place(relx=0.03,rely=0.02,height=31,width=101)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Tbutton''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',_ana2color)])
        self.TCheckbutton1 = ttk.Checkbutton (master)
        self.TCheckbutton1.place(relx=0.03,rely=0.08,relheight=0.03
                ,relwidth=0.13)
        self.TCheckbutton1.configure(variable=themed_support.tch36)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Tcheck''')

        self.TCombobox1 = ttk.Combobox (master)
        self.TCombobox1.place(relx=0.03,rely=0.14,relheight=0.02,relwidth=0.3)
        self.TCombobox1.configure(textvariable=themed_support.combobox)
        self.TCombobox1.configure(takefocus="")

        self.TEntry1 = ttk.Entry (master)
        self.TEntry1.place(relx=0.05,rely=0.19,relheight=0.02,relwidth=0.27)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")

        self.TFrame1 = ttk.Frame (master)
        self.TFrame1.place(relx=0.05,rely=0.24,relheight=0.09,relwidth=0.21)
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(width=125)

        self.TLabelframe1 = ttk.Labelframe (master)
        self.TLabelframe1.place(relx=0.05,rely=0.39,relheight=0.09
                ,relwidth=0.25)
        self.TLabelframe1.configure(text='''Tlabelframe''')
        self.TLabelframe1.configure(width=150)

        self.TMenubutton1 = ttk.Menubutton(master)
        self.TMenubutton1.place(relx=0.47,rely=0.02,relheight=0.03
                ,relwidth=0.17)
        self.menu = Menu(self.TMenubutton1,tearoff=0)
        self.TMenubutton1.configure(menu=self.menu)
        self.TMenubutton1.configure(takefocus="")
        self.TMenubutton1.configure(text='''Tmenu''')

        self.style.configure('TNotebook.Tab',background=_bgcolor)
        self.style.configure('TNotebook.Tab',foreground=_fgcolor)
        self.style.map('TNotebook.Tab',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(master)
        self.TNotebook1.place(relx=0.45,rely=0.08,relheight=0.26,relwidth=0.5)
        self.TNotebook1.configure(width=300)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_pg0 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg0, padding=3)
        self.TNotebook1.tab(0, text="Page 1",underline="-1",)
        self.TNotebook1_pg1 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg1, padding=3)
        self.TNotebook1.tab(1, text="Page 2",underline="-1",)

        self.TPanedwindow1 = ttk.Panedwindow (master, orient="horizontal")
        self.TPanedwindow1.place(relx=0.45,rely=0.39,relheight=0.23
                ,relwidth=0.33)
        self.TPanedwindow1.configure(width=200)
        self.TPanedwindow1_f1 = ttk.Labelframe(width=75, text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_f1)
        self.TPanedwindow1_f2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow1.add(self.TPanedwindow1_f2)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TPanedwindow2 = ttk.Panedwindow (master, orient="vertical")
        self.TPanedwindow2.place(relx=0.05,rely=0.5,relheight=0.23
                ,relwidth=0.33)
        self.TPanedwindow2.configure(width=200)
        self.TPanedwindow2_f1 = ttk.Labelframe(height=75, text='Pane 1')
        self.TPanedwindow2.add(self.TPanedwindow2_f1)
        self.TPanedwindow2_f2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow2.add(self.TPanedwindow2_f2)
        self.__funcid1 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash1)

        self.TProgressbar1 = ttk.Progressbar (master)
        self.TProgressbar1.place(relx=0.45,rely=0.64,relheight=0.02
                ,relwidth=0.17)

        self.style.map('TRadiobutton',background=
            [('selected', _bgcolor), ('active',_ana2color)])
        self.TRadiobutton1 = ttk.Radiobutton (master)
        self.TRadiobutton1.place(relx=0.73,rely=0.64,relheight=0.03
                ,relwidth=0.13)
        self.TRadiobutton1.configure(takefocus="")
        self.TRadiobutton1.configure(text='''TRadio''')

        self.TScale1 = ttk.Scale (master)
        self.TScale1.place(relx=0.85,rely=0.41,relwidth=0.0,relheight=0.11
                ,width=17)
        self.TScale1.configure(orient="vertical")
        self.TScale1.configure(takefocus="")

        self.TScale2 = ttk.Scale (master)
        self.TScale2.place(relx=0.45,rely=0.68,relwidth=0.17,relheight=0.0
                ,height=17)
        self.TScale2.configure(takefocus="")

        self.Scrolledlistbox1 = ScrolledListBox(master)
        self.Scrolledlistbox1.place(relx=0.05,rely=0.76,relheight=0.08
                ,relwidth=0.17)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(disabledforeground="#b8a786")
        self.Scrolledlistbox1.configure(font=font11)
        self.Scrolledlistbox1.configure(highlightbackground="wheat")
        self.Scrolledlistbox1.configure(highlightcolor="wheat")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(width=10)

        self.Scrolledtext1 = ScrolledText (master)
        self.Scrolledtext1.place(relx=0.37,rely=0.76,relheight=0.07
                ,relwidth=0.18)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font=font10)
        self.Scrolledtext1.configure(highlightbackground="wheat")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(width=10)

        self.style.configure('Treeview.Heading',  font=font10)
        self.Scrolledtreeview1 = ScrolledTreeView (master)
        self.Scrolledtreeview1.place(relx=0.13,rely=0.86,relheight=0.12
                ,relwidth=0.7)
        self.Scrolledtreeview1.configure(columns="Col1")
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="209")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="209")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.TSizegrip1 = ttk.Sizegrip(master)
        self.TSizegrip1.place(anchor=SE,relx=1.0,rely=1.0)

        self.TLabel1 = ttk.Label (master)
        self.TLabel1.place(relx=0.05,rely=0.34,height=17,width=37)
        self.TLabel1.configure(background=_bgcolor)
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Tlabel''')


    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75,]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def __adjust_sash1(self, event):
        paned = event.widget
        pos = [75,]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid1)
        del self.__funcid1




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        self.configure(yscrollcommand=self._autoscroll(vsb),
            xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        vsb.grid(column=1, row=0, sticky='ns')
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (took from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


if __name__ == '__main__':
    vp_start_gui()



