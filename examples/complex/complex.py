#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.2
# In conjunction with Tcl version 8.6
#    Jan. 27, 2014 12:16:35 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import complex_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('Complex_example')
    root.geometry('600x478+650+150')
    complex_support.set_Tk_var()
    #set_Tk_var()
    w = Complex_example (root)
    complex_support.init(root, w)
    root.mainloop()

w = None
def create_Complex_example (root):
    '''Starting point when module is imported by another program.'''
    global w, w_win
    w = Toplevel (root)
    w.title('Complex_example')
    w.geometry('600x478+650+150')
    complex_support.set_Tk_var()
    w_win = Complex_example (w)
    complex_support.init(w, w_win)
    return w_win

def destroy_Complex_example ():
    global w
    w.destroy()
    w = None


class Complex_example:
    def __init__(self, master=None):
        _bgcolor = 'wheat'  # X11 color: #f5deb3
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#b2c9f4' # Closest X11 color: 'SlateGray2'
        _ana1color = '#eaf4b2' # Closest X11 color: '{pale goldenrod}'
        _ana2color = '#f4bcb2' # Closest X11 color: 'RosyBrown2'
        font10 = "-family {DejaVu Sans} -size 14 -weight normal -slant " + \
            " roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font10)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background=_bgcolor)
        master.configure(highlightbackground="wheat")
        master.configure(highlightcolor="black")


        self.TPanedwindow1 = ttk.Panedwindow (master, orient="vertical")
        self.TPanedwindow1.place(relx=0.05,rely=0.04,relheight=0.86
                ,relwidth=0.9)
        self.TPanedwindow1.configure(width=200)
        self.TPanedwindow1_f1 = ttk.Labelframe(height=75, text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_f1)
        self.TPanedwindow1_f2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow1.add(self.TPanedwindow1_f2)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TPanedwindow2 = ttk.Panedwindow (self.TPanedwindow1_f2, orient="horizontal")
        self.TPanedwindow2.place(relx=0.07,rely=0.09,relheight=0.85
                ,relwidth=0.85)
        self.TPanedwindow2.configure(width=200)
        self.TPanedwindow2_f1 = ttk.Labelframe(width=75, text='Pane 1')
        self.TPanedwindow2.add(self.TPanedwindow2_f1)
        self.TPanedwindow2_f2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow2.add(self.TPanedwindow2_f2)
        self.__funcid1 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash1)

        self.style.configure('TNotebook.Tab',background=_bgcolor)
        self.style.configure('TNotebook.Tab',foreground=_fgcolor)
        self.style.map('TNotebook.Tab',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(self.TPanedwindow2_f2)
        self.TNotebook1.place(relx=0.11,rely=0.14,relheight=0.82,relwidth=0.79)
        self.TNotebook1.configure(width=300)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_pg0 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg0, padding=3)
        self.TNotebook1.tab(0, text="Page 1",underline="-1",)
        self.TNotebook1_pg1 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg1, padding=3)
        self.TNotebook1.tab(1, text="Page 2",underline="-1",)

        self.Label1 = Label (self.TNotebook1_pg0)
        self.Label1.place(relx=0.17,rely=0.25,height=24,width=85)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background=_bgcolor)
        self.Label1.configure(disabledforeground="#b8a786")
        self.Label1.configure(font=font10)
        self.Label1.configure(highlightbackground="wheat")
        self.Label1.configure(text='''First Page''')

        self.Button2 = Button (self.TNotebook1_pg0)
        self.Button2.place(relx=0.3,rely=0.5,height=30,width=77)
        self.Button2.configure(activebackground="#f4bcb2")
        self.Button2.configure(background=_bgcolor)
        self.Button2.configure(command=complex_support.qqq)
        self.Button2.configure(disabledforeground="#b8a786")
        self.Button2.configure(font=font10)
        self.Button2.configure(highlightbackground="wheat")
        self.Button2.configure(text='''Button''')
        self.Button2.configure(textvariable=complex_support.zzz)

        self.Label2 = Label (self.TNotebook1_pg1)
        self.Label2.place(relx=0.33,rely=0.39,height=24,width=108)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background=_bgcolor)
        self.Label2.configure(disabledforeground="#b8a786")
        self.Label2.configure(font=font10)
        self.Label2.configure(highlightbackground="wheat")
        self.Label2.configure(text='''Second Page''')

        self.Button1 = Button (master)
        self.Button1.place(relx=0.37,rely=0.92,height=30,width=58)
        self.Button1.configure(activebackground="#f4bcb2")
        self.Button1.configure(background=_bgcolor)
        self.Button1.configure(command=complex_support.quit)
        self.Button1.configure(disabledforeground="#b8a786")
        self.Button1.configure(font=font10)
        self.Button1.configure(highlightbackground="wheat")
        self.Button1.configure(text='''Quit''')

        self.TSizegrip1 = ttk.Sizegrip(master)
        self.TSizegrip1.place(anchor=SE,relx=1.0,rely=1.0)


    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75,]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def __adjust_sash1(self, event):
        paned = event.widget
        pos = [75,]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid1)
        del self.__funcid1





if __name__ == '__main__':
    vp_start_gui()



