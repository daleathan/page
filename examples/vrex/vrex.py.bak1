#! /usr/bin/env python
#
# Generated by PAGE version 4.2
# In conjunction with Tcl version 8.6
#    Jan. 14, 2014 04:36:50 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1



import vrex_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('Vrex_for_Python')
    root.geometry('609x605+617+155')
    w = Vrex_for_Python (root)
    vrex_support.init(root, w)
    root.mainloop()

w = None
def create_Vrex_for_Python (root):
    '''Starting point when module is imported by another program.'''
    global w, w_win
    w = Toplevel (root)
    w.title('Vrex_for_Python')
    w.geometry('609x605+617+155')
    w_win = Vrex_for_Python (w)
    vrex_support.init(w, w_win)
    return w_win

def destroy_Vrex_for_Python ():
    global w
    w.destroy()
    w = None







class Vrex_for_Python:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(highlightbackground="wheat")
        master.configure(highlightcolor="black")


        self.TPanedwindow1 = ttk.Panedwindow (master, orient="vertical")
        self.TPanedwindow1.place(relx=0.03,rely=0.02,relheight=0.83
                ,relwidth=0.96)
        self.TPanedwindow1.configure(width=585)
        self.TPanedwindow1_f1 = ttk.Labelframe(height=75, text='Regular Expression')
        self.TPanedwindow1.add(self.TPanedwindow1_f1)
        self.TPanedwindow1_f2 = ttk.Labelframe(height=75, text='Sample')
        self.TPanedwindow1.add(self.TPanedwindow1_f2)
        self.TPanedwindow1_f3 = ttk.Labelframe(text='Matches')
        self.TPanedwindow1.add(self.TPanedwindow1_f3)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.Expression = ScrolledText (self.TPanedwindow1_f1)
        self.Expression.place(relx=0.02,rely=0.2,relheight=0.75,relwidth=0.96)
        self.Expression.configure(background="white")
        self.Expression.configure(font="TkTextFont")
        self.Expression.configure(highlightbackground="wheat")
        self.Expression.configure(insertborderwidth="3")
        self.Expression.configure(selectbackground="#c4c4c4")
        self.Expression.configure(width=10)
        self.Expression.configure(wrap=NONE)

        self.Sample = ScrolledText (self.TPanedwindow1_f2)
        self.Sample.place(relx=0.02,rely=0.2,relheight=0.67,relwidth=0.96)
        self.Sample.configure(background="white")
        self.Sample.configure(font="TkTextFont")
        self.Sample.configure(insertborderwidth="3")
        self.Sample.configure(selectbackground="#c4c4c4")
        self.Sample.configure(width=10)
        self.Sample.configure(wrap=NONE)
        self.Sample.bind('<Button-1>',vrex_support.sync_matches)

        self.Matches = ScrolledText (self.TPanedwindow1_f3)
        self.Matches.place(relx=0.02,rely=0.04,relheight=0.93,relwidth=0.96)
        self.Matches.configure(background="white")
        self.Matches.configure(font="TkTextFont")
        self.Matches.configure(insertborderwidth="3")
        self.Matches.configure(selectbackground="#c4c4c4")
        self.Matches.configure(width=10)
        self.Matches.configure(wrap=NONE)
        self.Matches.bind('<Button-1>',vrex_support.sync_sample)

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)

        self.file = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                background="#d9d9d9",
                font=('Nimbus Sans L',14,'normal','roman',),
                label="File")
        self.file.add_command(
                background="#d9d9d9",
                command=vrex_support.load_regular_expression,
                font=('Nimbus Sans L',14,'normal','roman',),
                label="Load regular expression")
        self.file.add_command(
                background="#d9d9d9",
                command=vrex_support.save_regular_expression,
                font=('Nimbus Sans L',14,'normal','roman',),
                label="Save regular expression")
        self.file.add_separator(
                background="#d9d9d9")
        self.file.add_command(
                background="#d9d9d9",
                command=vrex_support.load_sample,
                font=('Nimbus Sans L',14,'normal','roman',),
                label="Load sample")
        self.file.add_command(
                background="#d9d9d9",
                command=vrex_support.save_sample,
                font=('Nimbus Sans L',14,'normal','roman',),
                label="Save sample")
        self.file.add_separator(
                background="#d9d9d9")
        self.file.add_command(
                background="#d9d9d9",
                command=vrex_support.quit,
                font=('Nimbus Sans L',14,'normal','roman',),
                label="Quit")
        self.menubar.add_command(
                background="#d9d9d9",
                command=vrex_support.help,
                font=('Nimbus Sans L',14,'normal','roman',),
                label="Help")


        self.Quit = Button (master)
        self.Quit.place(relx=0.9,rely=0.91,height=25,width=49)
        self.Quit.configure(activebackground="#f9f9f9")
        self.Quit.configure(command=vrex_support.quit)
        self.Quit.configure(disabledforeground="#b8a786")
        self.Quit.configure(highlightbackground="wheat")
        self.Quit.configure(text='''Quit''')

        self.Match = Button (master)
        self.Match.place(relx=0.16,rely=0.91,height=25,width=61)
        self.Match.configure(activebackground="#f9f9f9")
        self.Match.configure(command=lambda:vrex_support.display(0))
        self.Match.configure(disabledforeground="#b8a786")
        self.Match.configure(highlightbackground="wheat")
        self.Match.configure(text='''Match''')

        self.Button1 = Button (master)
        self.Button1.place(relx=0.28,rely=0.91,height=25,width=32)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(background="#ffffff")
        self.Button1.configure(command=lambda:vrex_support.display(1))
        self.Button1.configure(disabledforeground="#b8a786")
        self.Button1.configure(foreground="blue")
        self.Button1.configure(highlightbackground="wheat")
        self.Button1.configure(text='''1''')

        self.Button2 = Button (master)
        self.Button2.place(relx=0.34,rely=0.91,height=25,width=32)
        self.Button2.configure(activebackground="#f9f9f9")
        self.Button2.configure(background="#ffffff")
        self.Button2.configure(command=lambda:vrex_support.display(2))
        self.Button2.configure(disabledforeground="#b8a786")
        self.Button2.configure(foreground="darkgreen")
        self.Button2.configure(highlightbackground="wheat")
        self.Button2.configure(text='''2''')

        self.Button3 = Button (master)
        self.Button3.place(relx=0.41,rely=0.91,height=25,width=32)
        self.Button3.configure(activebackground="#f9f9f9")
        self.Button3.configure(background="#ffffff")
        self.Button3.configure(command=lambda:vrex_support.display(3))
        self.Button3.configure(disabledforeground="#b8a786")
        self.Button3.configure(foreground="magenta")
        self.Button3.configure(highlightbackground="wheat")
        self.Button3.configure(text='''3''')

        self.Button4 = Button (master)
        self.Button4.place(relx=0.48,rely=0.91,height=25,width=32)
        self.Button4.configure(activebackground="#f9f9f9")
        self.Button4.configure(background="#ffffff")
        self.Button4.configure(command=lambda:vrex_support.display(4))
        self.Button4.configure(disabledforeground="#b8a786")
        self.Button4.configure(foreground="sienna")
        self.Button4.configure(highlightbackground="wheat")
        self.Button4.configure(text='''4''')

        self.Button5 = Button (master)
        self.Button5.place(relx=0.54,rely=0.91,height=25,width=32)
        self.Button5.configure(activebackground="#f9f9f9")
        self.Button5.configure(background="#ffffff")
        self.Button5.configure(command=lambda:vrex_support.display(5))
        self.Button5.configure(disabledforeground="#b8a786")
        self.Button5.configure(foreground="purple")
        self.Button5.configure(highlightbackground="wheat")
        self.Button5.configure(text='''5''')

        self.Button6 = Button (master)
        self.Button6.place(relx=0.61,rely=0.91,height=25,width=32)
        self.Button6.configure(activebackground="#f9f9f9")
        self.Button6.configure(background="#ffffff")
        self.Button6.configure(command=lambda:vrex_support.display(6))
        self.Button6.configure(disabledforeground="#b8a786")
        self.Button6.configure(foreground="firebrick")
        self.Button6.configure(highlightbackground="wheat")
        self.Button6.configure(text='''6''')

        self.Button7 = Button (master)
        self.Button7.place(relx=0.67,rely=0.91,height=25,width=32)
        self.Button7.configure(activebackground="#f9f9f9")
        self.Button7.configure(background="#ffffff")
        self.Button7.configure(command=lambda:vrex_support.display(7))
        self.Button7.configure(disabledforeground="#b8a786")
        self.Button7.configure(foreground="deeppink")
        self.Button7.configure(highlightbackground="wheat")
        self.Button7.configure(text='''7''')

        self.Button8 = Button (master)
        self.Button8.place(relx=0.74,rely=0.91,height=25,width=32)
        self.Button8.configure(activebackground="#f9f9f9")
        self.Button8.configure(background="#ffffff")
        self.Button8.configure(command=lambda:vrex_support.display(8))
        self.Button8.configure(disabledforeground="#b8a786")
        self.Button8.configure(foreground="green4")
        self.Button8.configure(highlightbackground="wheat")
        self.Button8.configure(text='''8''')

        self.Button9 = Button (master)
        self.Button9.place(relx=0.8,rely=0.91,height=25,width=32)
        self.Button9.configure(activebackground="#f9f9f9")
        self.Button9.configure(background="#ffffff")
        self.Button9.configure(command=lambda:vrex_support.display(9))
        self.Button9.configure(disabledforeground="#b8a786")
        self.Button9.configure(foreground="deepskyblue1")
        self.Button9.configure(highlightbackground="wheat")
        self.Button9.configure(text='''9''')

        self.Go = Button (master)
        self.Go.place(relx=0.05,rely=0.91,height=25,width=40)
        self.Go.configure(activebackground="#f9f9f9")
        self.Go.configure(command=vrex_support.go)
        self.Go.configure(disabledforeground="#b8a786")
        self.Go.configure(highlightbackground="wheat")
        self.Go.configure(text='''Go''')

        self.TSizegrip1 = ttk.Sizegrip(master)
        self.TSizegrip1.place(anchor=SE,relx=1.0,rely=1.0)


    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75,155,]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        self.configure(yscrollcommand=self._autoscroll(vsb),
            xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        vsb.grid(column=1, row=0, sticky='ns')
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (took from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



