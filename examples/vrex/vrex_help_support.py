#! /usr/bin/env python
#
# Generated by PAGE version 4.2
# In conjunction with Tcl version 8.6
#    Jan. 10, 2014 10:12:47 PM


import sys
try:
    from Tkinter import *
except ImportError:
    from tkinter import *
try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1



def init(top, gui, arg=None):
    global w, top_level
    w = gui
    top_level = top
    load_vrex_help(w.TScrolledtext1)


def load_vrex_help(o):
    help = '''
Vrex is a program for testing Python regular expressions.  The GUI is made up of a menu and a paned window with three adjustable sub-windows each of which contains a scrolled test window and a row of buttons which control the action of the program. The GUI may be resized as may this window.

One enters the regular expression under test into the top text box, and the sample which is the subject of the regular expression match into the middle text box.  One may use the File menu to load file into the text boxes, one may directly type entries or use the normal cut and paste facilities of the operating system

Pressing the Go button causes the match to be attempted.  Also, colorization is applied to both the regular expression and to the sample. The regular expression is colorized to show the portions of the regular expression which can be extracted individually. This has been called grouping. And if the match is successful the corresponding groups within the sample are displayed in the same colors as in the regular expression window.

By selecting one of the row of buttons marked match, 1, 2, ..., 9, the portions of the s v_help_support.py ample corresponding to extracted groups are displayed in the match window.

You can use the File menu to load to save both the regular expression and the sample as well as invoke this help window.

The Quit Button terminates the program. The File menu also has a Quit entry that terminates the program.

In normal usage, one loads a sample and a regular expression an experiments by incrementally changing both and then testing by hitting the go button. When you are satisfied, you can save the regular expression or put it on the clipboard by selecting the characters that make up the regular expression

You can also enter a whole file of sample strings using File->Load Sample. In that case, when you select Go, the regular expression candidate will be applied to each line individually in the sample an the sample will be colorized accordingly.  In the Matches window you will see the individual match results for each line. The two window can be synchronized by clicking in either the Sample window or the Matches window and the corresponding line will be visible in the other window. You can add build a set of samples by adding them to the sample window and saving the sample to a file.
'''

    o.insert(END, help)


def close():
    destroy_window ()

def destroy_window ():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

